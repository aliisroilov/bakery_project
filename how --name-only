[33mcommit 49beeb08f973a8610ced42ff8a39273d81f256d0[m[33m ([m[1;36mHEAD[m[33m -> [m[1;32mmain[m[33m)[m
Author: Ali <aliisroilov4122@mail.ru>
Date:   Tue Oct 14 15:32:35 2025 +0500

    Update bakery project with latest fixes

[1mdiff --git a/bakery_project/__pycache__/settings.cpython-313.pyc b/bakery_project/__pycache__/settings.cpython-313.pyc[m
[1mindex 429bcc4..50d66c2 100644[m
Binary files a/bakery_project/__pycache__/settings.cpython-313.pyc and b/bakery_project/__pycache__/settings.cpython-313.pyc differ
[1mdiff --git a/bakery_project/settings.py b/bakery_project/settings.py[m
[1mindex ded0859..6f0ebf8 100644[m
[1m--- a/bakery_project/settings.py[m
[1m+++ b/bakery_project/settings.py[m
[36m@@ -9,28 +9,28 @@[m [mimport dj_database_url        # pip install dj-database-url[m
 [m
 BASE_DIR = Path(__file__).resolve().parent.parent[m
 [m
[31m-DATABASES = {[m
[31m-    'default': {[m
[31m-        'ENGINE': 'django.db.backends.postgresql',[m
[31m-        'NAME': os.environ.get('POSTGRES_DB', 'bakery_db'),[m
[31m-        'USER': os.environ.get('POSTGRES_USER', 'bakuser'),[m
[31m-        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', '0270'),[m
[31m-        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),[m
[31m-        'PORT': os.environ.get('POSTGRES_PORT', ''),[m
[31m-    }[m
[31m-}[m
 # DATABASES = {[m
 #     'default': {[m
[31m-#         'ENGINE': 'django.db.backends.sqlite3',[m
[31m-#         'NAME': BASE_DIR / 'db.sqlite3',[m
[32m+[m[32m#         'ENGINE': 'django.db.backends.postgresql',[m
[32m+[m[32m#         'NAME': os.environ.get('POSTGRES_DB', 'bakery_db'),[m
[32m+[m[32m#         'USER': os.environ.get('POSTGRES_USER', 'bakuser'),[m
[32m+[m[32m#         'PASSWORD': os.environ.get('POSTGRES_PASSWORD', '0270'),[m
[32m+[m[32m#         'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),[m
[32m+[m[32m#         'PORT': os.environ.get('POSTGRES_PORT', ''),[m
 #     }[m
 # }[m
[32m+[m[32mDATABASES = {[m
[32m+[m[32m    'default': {[m
[32m+[m[32m        'ENGINE': 'django.db.backends.sqlite3',[m
[32m+[m[32m        'NAME': BASE_DIR / 'db.sqlite3',[m
[32m+[m[32m    }[m
[32m+[m[32m}[m
 # =========================[m
 # Core Settings[m
 # =========================[m
 SECRET_KEY = config('SECRET_KEY', default='unsafe-secret-key-for-testing')[m
 DEBUG = config('DEBUG', default=True, cast=bool)[m
[31m-ALLOWED_HOSTS = ['sutli-non.uz', 'www.sutli-non.uz', '217.76.51.229']  # For testing on Heroku[m
[32m+[m[32m# ALLOWED_HOSTS = ['sutli-non.uz', 'www.sutli-non.uz', '217.76.51.229']  # For testing on Heroku[m
 [m
 # =========================[m
 # Applications[m
[1mdiff --git a/dashboard/__pycache__/admin.cpython-313.pyc b/dashboard/__pycache__/admin.cpython-313.pyc[m
[1mindex cc38e2f..596e166 100644[m
Binary files a/dashboard/__pycache__/admin.cpython-313.pyc and b/dashboard/__pycache__/admin.cpython-313.pyc differ
[1mdiff --git a/dashboard/admin.py b/dashboard/admin.py[m
[1mindex 4b76b5d..0378978 100644[m
[1m--- a/dashboard/admin.py[m
[1m+++ b/dashboard/admin.py[m
[36m@@ -1,8 +1,37 @@[m
 from django.contrib import admin[m
[31m-from .models import Payment, LoanRepayment  # if LoanRepayment exists[m
[32m+[m[32mfrom .models import LoanRepayment, Payment[m
 [m
[32m+[m
[32m+[m[32m# --- Loan Repayment Admin ---[m
[32m+[m[32m@admin.register(LoanRepayment)[m
[32m+[m[32mclass LoanRepaymentAdmin(admin.ModelAdmin):[m
[32m+[m[32m    list_display = ("shop", "amount", "date")[m
[32m+[m[32m    list_filter = ("shop",)[m
[32m+[m[32m    search_fields = ("shop__name",)[m
[32m+[m[32m    ordering = ("-date",)[m
[32m+[m[32m    date_hierarchy = "date"[m
[32m+[m
[32m+[m[32m    # ‚úÖ Inline edit amount directly[m
[32m+[m[32m    list_editable = ("amount",)[m
[32m+[m
[32m+[m[32m    readonly_fields = ("date",)[m
[32m+[m
[32m+[m
[32m+[m[32m# --- Payment Admin ---[m
 @admin.register(Payment)[m
 class PaymentAdmin(admin.ModelAdmin):[m
[31m-    list_display = ("date", "payment_type", "shop", "order", "amount", "collected_by")[m
[31m-    list_filter = ("payment_type", "date")[m
[31m-    search_fields = ("shop__name", "order__id", "notes")[m
[32m+[m[32m    list_display = ("payment_type", "amount", "shop", "collected_by", "date", "short_notes")[m
[32m+[m[32m    list_display_links = ("shop",)  # ‚úÖ specify clickable field[m
[32m+[m[32m    list_filter = ("payment_type", "shop", "collected_by", "date")[m
[32m+[m[32m    search_fields = ("shop__name", "collected_by__username", "notes")[m
[32m+[m[32m    ordering = ("-date",)[m
[32m+[m[32m    date_hierarchy = "date"[m
[32m+[m
[32m+[m[32m    # ‚úÖ Inline edit key fields[m
[32m+[m[32m    list_editable = ("amount", "payment_type")[m
[32m+[m
[32m+[m[32m    readonly_fields = ("date",)[m
[32m+[m
[32m+[m[32m    def short_notes(self, obj):[m
[32m+[m[32m        return obj.notes[:50] if obj.notes else "-"[m
[32m+[m[32m    short_notes.short_description = "Notes"[m
\ No newline at end of file[m
[1mdiff --git a/db.sqlite3 b/db.sqlite3[m
[1mindex 58ed592..071bed1 100644[m
Binary files a/db.sqlite3 and b/db.sqlite3 differ
[1mdiff --git a/reports/__pycache__/admin.cpython-313.pyc b/reports/__pycache__/admin.cpython-313.pyc[m
[1mindex 75c2081..0eece76 100644[m
Binary files a/reports/__pycache__/admin.cpython-313.pyc and b/reports/__pycache__/admin.cpython-313.pyc differ
[1mdiff --git a/reports/admin.py b/reports/admin.py[m
[1mindex 45af546..d3056c0 100644[m
[1m--- a/reports/admin.py[m
[1m+++ b/reports/admin.py[m
[36m@@ -1,23 +1,52 @@[m
 from django.contrib import admin[m
[31m-from .models import Category, Purchase[m
[32m+[m[32mfrom .models import Category, Purchase, BakeryBalance[m
 [m
 # --- Category Admin ---[m
 @admin.register(Category)[m
 class CategoryAdmin(admin.ModelAdmin):[m
[31m-    list_display = ('name',)[m
[31m-    search_fields = ('name',)[m
[31m-    ordering = ('name',)[m
[32m+[m[32m    list_display = ("name", "description")[m
[32m+[m[32m    search_fields = ("name",)[m
[32m+[m[32m    ordering = ("name",)[m
[32m+[m[32m    list_editable = ("description",)  # ‚úÖ Editable directly in list view[m
[32m+[m
 [m
 # --- Purchase Admin ---[m
 @admin.register(Purchase)[m
 class PurchaseAdmin(admin.ModelAdmin):[m
[31m-    list_display = ('item_name', 'category', 'unit_price', 'purchase_date', 'short_notes')[m
[31m-    list_filter = ('category', 'purchase_date')[m
[31m-    search_fields = ('item_name', 'notes')[m
[31m-    ordering = ('-purchase_date',)[m
[31m-    date_hierarchy = 'purchase_date'[m
[32m+[m[32m    list_display = ("item_name", "category", "unit_price", "purchase_date", "short_notes")[m
[32m+[m[32m    list_filter = ("category", "purchase_date")[m
[32m+[m[32m    search_fields = ("item_name", "notes")[m
[32m+[m[32m    ordering = ("-purchase_date",)[m
[32m+[m[32m    date_hierarchy = "purchase_date"[m
[32m+[m
[32m+[m[32m    # ‚úÖ Make certain fields editable directly in list view[m
[32m+[m[32m    list_editable = ("unit_price", "category", "purchase_date")[m
 [m
     # Shorten notes display in list view[m
     def short_notes(self, obj):[m
         return obj.notes[:50] if obj.notes else "-"[m
[31m-    short_notes.short_description = 'Notes'[m
[32m+[m[32m    short_notes.short_description = "Notes"[m
[32m+[m
[32m+[m
[32m+[m[32m# --- Bakery Balance Admin ---[m
[32m+[m[32m@admin.register(BakeryBalance)[m
[32m+[m[32mclass BakeryBalanceAdmin(admin.ModelAdmin):[m
[32m+[m[32m    list_display = ("amount", "updated_at")[m
[32m+[m[32m    fields = ("amount",)[m
[32m+[m[32m    readonly_fields = ("updated_at",)[m
[32m+[m
[32m+[m[32m    def has_add_permission(self, request):[m
[32m+[m[32m        # ‚ùå Prevent adding multiple balances[m
[32m+[m[32m        return not BakeryBalance.objects.exists()[m
[32m+[m
[32m+[m[32m    def has_delete_permission(self, request, obj=None):[m
[32m+[m[32m        # ‚ùå Prevent deleting the main balance[m
[32m+[m[32m        return False[m
[32m+[m
[32m+[m[32m    # ‚úÖ Custom admin action to reset balance to zero[m
[32m+[m[32m    actions = ["reset_to_zero"][m
[32m+[m
[32m+[m[32m    def reset_to_zero(self, request, queryset):[m
[32m+[m[32m        BakeryBalance.reset()[m
[32m+[m[32m        self.message_user(request, "‚úÖ Bakery balance has been reset to zero.")[m
[32m+[m[32m    reset_to_zero.short_description = "Reset balance to zero"[m
